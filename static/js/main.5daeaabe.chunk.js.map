{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","data-clicked","clicked","id","alt","name","src","image","onClick","Wrapper","children","Title","href","message","score","highScore","App","state","images","shuffle","array","sort","Math","random","i","length","clickHandler","newImagesArr","_this","console","log","setState","map","val","this","_this2","Fragment","components_Title","components_Wrapper","components_ImageCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i9EAaeA,MAVf,SAAmBC,GACjB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,eAAcL,EAAMM,QAASC,GAAIP,EAAMO,GAAIH,UAAU,WAAWI,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOC,QAASZ,EAAMY,kBCAhHC,MAJf,SAAiBb,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKI,GAAG,WAAWP,EAAMc,iBCWnBC,MAZf,SAAef,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUY,KAAK,KAA5B,gBACJf,EAAAC,EAAAC,cAAA,UAAKH,EAAMiB,SACXhB,EAAAC,EAAAC,cAAA,oBAAYH,EAAMkB,MAAlB,iBAAuClB,EAAMmB,qBCyDtCC,6MA3DbC,MAAQ,CACNC,SACAJ,MAAO,EACPC,UAAW,EACXF,QAAS,iCAGXM,QAAU,SAAAC,GACRA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,KACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAChCJ,EAAMI,GAAGrB,GAAKqB,KAUlBE,aAAe,SAAAvB,GACb,IAAIwB,EAAeC,EAAKX,MAAMC,OAE9B,GADAW,QAAQC,IAAIH,IACPC,EAAKX,MAAMC,OAAOf,GAAID,QAGzB,OAFAyB,EAAaxB,GAAID,SAAU,EAC3B0B,EAAKT,QAAQQ,GACTC,EAAKX,MAAMH,OAASc,EAAKX,MAAMF,UAAkBa,EAAKG,SAAS,CAAEb,OAAQS,EAAcb,MAAOc,EAAKX,MAAMH,MAAQ,EAAGC,UAAWa,EAAKX,MAAMF,UAAY,EAAGF,QAAS,yBAC/Je,EAAKG,SAAS,CAAEb,OAAQS,EAAcb,MAAOc,EAAKX,MAAMH,MAAQ,EAAGD,QAAS,yBAEnFc,EAAaK,IAAI,SAAAC,GAAG,OAAIA,EAAI/B,SAAU,IACtC0B,EAAKT,QAAQQ,GACbC,EAAKG,SAAS,CAAEb,OAAQS,EAAcb,MAAO,EAAGD,QAAS,iHAhB3D,IAAIc,EAAeO,KAAKjB,MAAMC,OAC9BgB,KAAKf,QAAQQ,GACbO,KAAKH,SAAS,CAAEb,OAAQS,qCAkBjB,IAAAQ,EAAAD,KACP,OACErC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CAAOxB,QAASqB,KAAKjB,MAAMJ,QAASC,MAAOoB,KAAKjB,MAAMH,MAAOC,UAAWmB,KAAKjB,MAAMF,YACnFlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAEbH,EAAAC,EAAAC,cAACuC,EAAD,KAEGJ,KAAKjB,MAAMC,OAAOc,IAAI,SAAAzB,GAAK,OAC1BV,EAAAC,EAAAC,cAACwC,EAAD,CACEpC,GAAII,EAAMJ,GACVqC,IAAKjC,EAAMJ,GACXD,QAASK,EAAML,QACfK,MAAOA,EAAMA,MACbC,QAAS,kBAAM2B,EAAKT,aAAanB,EAAMJ,mBAlDrCsC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5daeaabe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImageCard(props) {\r\n  return (\r\n\r\n      <div className=\"img-container\">\r\n        <img data-clicked={props.clicked} id={props.id} className=\"char-img\" alt={props.name} src={props.image} onClick={props.onClick} />\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ImageCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div id=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return (\r\n      <nav className=\"navbar\">\r\n      <ul>\r\n        <li><a className=\"navlink\" href=\"/\">Clicky Game</a></li>\r\n        <li>{props.message}</li>\r\n        <li>Score: {props.score} | Top Score: {props.highScore}</li>\r\n      </ul>\r\n      </nav>\r\n  )\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    message: \"Click on an image to begin!\"\n  };\n\n  shuffle = array => {\n    array.sort(() => Math.random() - 0.5);\n    for (let i = 0; i < array.length; i++) {\n      array[i].id = i;\n    };\n  };\n\n  componentDidMount() {\n    var newImagesArr = this.state.images;\n    this.shuffle(newImagesArr);\n    this.setState({ images: newImagesArr });\n  }\n\n  clickHandler = id => {\n    var newImagesArr = this.state.images;\n    console.log(newImagesArr)\n    if (!this.state.images[id].clicked) {\n      newImagesArr[id].clicked = true;\n      this.shuffle(newImagesArr);\n      if (this.state.score >= this.state.highScore) return this.setState({ images: newImagesArr, score: this.state.score + 1, highScore: this.state.highScore + 1, message: \"You guess correctly!\" });\n      return this.setState({ images: newImagesArr, score: this.state.score + 1, message: \"You guess correctly!\" });\n    } else {\n      newImagesArr.map(val => val.clicked = false);\n      this.shuffle(newImagesArr);\n      this.setState({ images: newImagesArr, score: 0, message: \"You guessed incorrectly!\" });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Title message={this.state.message} score={this.state.score} highScore={this.state.highScore}></Title>\n        <div className=\"\">\n\n          <Wrapper>\n\n            {this.state.images.map(image => (\n              <ImageCard\n                id={image.id}\n                key={image.id}\n                clicked={image.clicked}\n                image={image.image}\n                onClick={() => this.clickHandler(image.id)}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}